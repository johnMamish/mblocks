const int nContext = 81; // Number of Unique Contexts
const int nSensor  = 4; // Number of Sensors
const int dt = 500; // Delay-time.
// 0 = no neighbors 
// 1 = Light only
// 2 = Neighbor in contact

// Definitions: Hard-coded.
int AllSensors[nContext][nSensor] = {
    {0,0,0,0},
    {0,0,0,2},
    {0,0,2,0},
    {0,0,2,2},
    {0,2,0,0},
    {0,2,0,2},
    {0,2,2,0},
    {0,2,2,2},
    {2,0,0,0},
    {2,0,0,2},
    {2,0,2,0},
    {2,0,2,2},
    {2,2,0,0},
    {2,2,0,2},
    {2,2,2,0},
    {2,2,2,2},
    {1,1,1,1},
    {1,1,1,0},
    {0,1,1,1},
    {1,0,1,1},
    {1,1,0,1},
    {1,1,1,2},
    {2,1,1,1},
    {1,2,1,1},
    {1,1,2,1},
    {2,1,2,1},
    {1,2,1,2},
    {2,1,0,1},
    {1,2,1,0},
    {0,1,2,1},
    {1,0,1,2},
    {0,1,0,1},
    {1,0,1,0},
    {1,1,2,2},
    {2,1,1,2},
    {2,2,1,1},
    {1,2,2,1},
    {1,1,0,2},
    {2,1,1,0},
    {0,2,1,1},
    {1,0,2,1},
    {1,1,2,0},
    {0,1,1,2},
    {2,0,1,1},
    {1,2,0,1},
    {1,1,0,0},
    {0,1,1,0},
    {0,0,1,1},
    {1,0,0,1},
    {1,2,2,2},
    {2,1,2,2},
    {2,2,1,2},
    {2,2,2,1},
    {1,0,2,2},
    {2,1,0,2},
    {2,2,1,0},
    {0,2,2,1},
    {1,2,0,2},
    {2,1,2,0},
    {0,2,1,2},
    {2,0,2,1},
    {1,2,2,0},
    {0,1,2,2},
    {2,0,1,2},
    {2,2,0,1},
    {1,0,0,2},
    {2,1,0,0},
    {0,2,1,0},
    {0,0,2,1},
    {1,0,2,0},
    {0,1,0,2},
    {2,0,1,0},
    {0,2,0,1},
    {1,2,0,0},
    {0,1,2,0},
    {0,0,1,2},
    {2,0,0,1},
    {1,0,0,0},
    {0,1,0,0},
    {0,0,1,0},
    {0,0,0,1}};

float AllParameters[nContext][nSensor+1] = {
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {1.000000,0.000000,0.000000,0.000000,0.000000},
      {0.992677,0.001831,0.001831,0.001831,0.001831},
      {0.664613,0.001601,0.333195,0.000591,0.000000},
      {0.664613,0.000000,0.001601,0.333195,0.000591},
      {0.664613,0.000591,0.000000,0.001601,0.333195},
      {0.664613,0.333195,0.000591,0.000000,0.001601},
      {0.941329,0.000070,0.044790,0.013810,0.000000},
      {0.941329,0.000000,0.000070,0.044790,0.013810},
      {0.941329,0.013810,0.000000,0.000070,0.044790},
      {0.941329,0.044790,0.013810,0.000000,0.000070},
      {0.008827,0.000000,0.495587,0.000000,0.495587},
      {0.008827,0.495587,0.000000,0.495587,0.000000},
      {0.043784,0.000000,0.465886,0.000000,0.490330},
      {0.043784,0.490330,0.000000,0.465886,0.000000},
      {0.043784,0.000000,0.490330,0.000000,0.465886},
      {0.043784,0.465886,0.000000,0.490330,0.000000},
      {0.003692,0.000000,0.498154,0.000000,0.498154},
      {0.003692,0.498154,0.000000,0.498154,0.000000},
      {0.996154,0.000463,0.003383,0.000000,0.000000},
      {0.996154,0.000000,0.000463,0.003383,0.000000},
      {0.996154,0.000000,0.000000,0.000463,0.003383},
      {0.996154,0.003383,0.000000,0.000000,0.000463},
      {0.165319,0.499262,0.335420,0.000000,0.000000},
      {0.165319,0.000000,0.499262,0.335420,0.000000},
      {0.165319,0.000000,0.000000,0.499262,0.335420},
      {0.165319,0.335420,0.000000,0.000000,0.499262},
      {0.496369,0.004311,0.499320,0.000000,0.000000},
      {0.496369,0.000000,0.004311,0.499320,0.000000},
      {0.496369,0.000000,0.000000,0.004311,0.499320},
      {0.496369,0.499320,0.000000,0.000000,0.004311},
      {0.002682,0.499544,0.497773,0.000000,0.000000},
      {0.002682,0.000000,0.499544,0.497773,0.000000},
      {0.002682,0.000000,0.000000,0.499544,0.497773},
      {0.002682,0.497773,0.000000,0.000000,0.499544},
      {0.998558,0.001442,0.000000,0.000000,0.000000},
      {0.998558,0.000000,0.001442,0.000000,0.000000},
      {0.998558,0.000000,0.000000,0.001442,0.000000},
      {0.998558,0.000000,0.000000,0.000000,0.001442},
      {0.556494,0.443506,0.000000,0.000000,0.000000},
      {0.556494,0.000000,0.443506,0.000000,0.000000},
      {0.556494,0.000000,0.000000,0.443506,0.000000},
      {0.556494,0.000000,0.000000,0.000000,0.443506},
      {0.009498,0.990502,0.000000,0.000000,0.000000},
      {0.009498,0.000000,0.990502,0.000000,0.000000},
      {0.009498,0.000000,0.000000,0.990502,0.000000},
      {0.009498,0.000000,0.000000,0.000000,0.990502},
      {0.999902,0.000098,0.000000,0.000000,0.000000},
      {0.999902,0.000000,0.000098,0.000000,0.000000},
      {0.999902,0.000000,0.000000,0.000098,0.000000},
      {0.999902,0.000000,0.000000,0.000000,0.000098},
      {0.000015,0.999985,0.000000,0.000000,0.000000},
      {0.000015,0.000000,0.999985,0.000000,0.000000},
      {0.000015,0.000000,0.000000,0.999985,0.000000},
      {0.000015,0.000000,0.000000,0.000000,0.999985},
      {0.373871,0.626129,0.000000,0.000000,0.000000},
      {0.373871,0.000000,0.626129,0.000000,0.000000},
      {0.373871,0.000000,0.000000,0.626129,0.000000},
      {0.373871,0.000000,0.000000,0.000000,0.626129},
      {0.984537,0.015463,0.000000,0.000000,0.000000},
      {0.984537,0.000000,0.015463,0.000000,0.000000},
      {0.984537,0.000000,0.000000,0.015463,0.000000},
      {0.984537,0.000000,0.000000,0.000000,0.015463},
      {0.005356,0.994644,0.000000,0.000000,0.000000},
      {0.005356,0.000000,0.994644,0.000000,0.000000},
      {0.005356,0.000000,0.000000,0.994644,0.000000},
      {0.005356,0.000000,0.000000,0.000000,0.994644}};

int FindSensorIndex(int Reading[])
{
  int Index = 0;
  int Counter = 0;
  while (Index<nContext)
  {
    Counter = 0;
    // Go through each sensor element and count how many of them are the same.
    for (int i=0;i<nSensor;i++) if (Reading[i]==AllSensors[Index][i]) Counter++;
    // If all of them are the same, break the loop. Otherwise, continue search.
    if (Counter==nSensor) break;
    Index++;
  }
  return Index;
}

void setup(){
  Serial.begin(115200);
}

void loop()
{
    bool DebugMode = false;
    if (DebugMode)
    {
      int iS = 17;
      Serial.print("[");
      for(int i = 0; i<nSensor; i++)
      {
        String strPar = String(AllSensors[iS][i]) + ",\t";
        Serial.print(strPar);
      }
      Serial.print("]  ---  [");
      for(int i = 0; i<nSensor+1; i++)
      {
        String strPar = String(AllParameters[iS][i]) + ",\t";
        Serial.print(strPar);
      }
      Serial.print("]\n");
      delay(dt);        
   
      // Some debugging 
      int s1[4] = {0,2,0,0};
      Serial.println(FindSensorIndex(s1));
      delay(dt);
      int s2[4]= {0,0,0,0};
      Serial.println(FindSensorIndex(s2));
      delay(dt);
      int s3[4]= {2,2,2,2};
      Serial.println(FindSensorIndex(s3));
      delay(dt);
      int s4[4]= {1,0,0,0};
      Serial.println(FindSensorIndex(s4));
      delay(dt);
     }
     
  // Sensor reading should be an int array of 4.
  // All possible sensor readings are given in AllSensors
  
}
